#! /usr/bin/env python
import argparse
import re

from sys import argv

import folium
import geoip2.database


IPv4_REGEX = r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"

def get_ips_from_file(ip_file):
    """reads ips from a file

    :ip_file: file of IPs
    :returns: set of ips

    """
    with open(ip_file) as ips:
        ips_list = [ip.strip() for ip in ips]

    return sanitize_ips(ips_list)


def sanitize_ips(list_ips):
    """santizes ips from a list or set
    :list_ips 
    """
    ips_set = set() 
    failed_ips = set()

    for ip in list_ips:
        check_ip = re.match(IPv4_REGEX ,ip)
        if check_ip:
            ips_set.add(ip)
        else:
            failed_ips.add(ip)

    return ips_set



def ip_info(ips):
    """
    """
    ip_dict = {}
    
    if isinstance(ips, str):
        ips = [ips]
    ips_set = sanitize_ips(ips)
    
    if "database":
        reader = geoip2.database.Reader('/tmp/GeoLite2-City.mmdb')
    

    for ip in ips:
        try:
            ip_dict[ip] = reader.city(ip)
        except Exception as exc:
            ip_dict[ip] = None

    return ip_dict

def create_map(ip_dict):
    """creates

    :ip_dict: dictionary of ips

    """
    map_osm = folium.Map(location=[45.5236, -122.6750], zoom_start=2)
    for ip in ip_dict.keys():
        if ip_dict[ip]:
            map_osm.circle_marker(location=(ip_dict[ip].location.latitude, 
                ip_dict[ip].location.longitude), popup=ip)

    map_osm.create_map(path='osm.html')



def get_args():
    """Gets the command line arguments
    :returns: TODO

    """
    parser = argparse.ArgumentParser(description=
            "Supplying a list of IPs this")
    parser.add_argument("--file", type=str, dest="file", required=True)

    return parser.parse_args()

if __name__ =="__main__":
    ARGS = get_args()
    IPS = ip_info(get_ips_from_file(ARGS.file))
    create_map(IPS)

